import{_ as t,c as e,o as l,a as d}from"./app.7221b965.js";const h=JSON.parse('{"title":"git提交规范","description":"","frontmatter":{},"headers":[{"level":2,"title":"提交结构","slug":"提交结构","link":"#提交结构","children":[]},{"level":2,"title":"提交规范","slug":"提交规范","link":"#提交规范","children":[]},{"level":2,"title":"提交类型","slug":"提交类型","link":"#提交类型","children":[]}],"relativePath":"docs/standards/git-commit.md","lastUpdated":1674225544000}'),n={name:"docs/standards/git-commit.md"},c=d(`<h1 id="git提交规范" tabindex="-1">git提交规范 <a class="header-anchor" href="#git提交规范" aria-hidden="true">#</a></h1><h2 id="提交结构" tabindex="-1">提交结构 <a class="header-anchor" href="#提交结构" aria-hidden="true">#</a></h2><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;类型&gt;[可选 范围]: &lt;描述&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">[可选 正文]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">[可选 脚注]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="提交规范" tabindex="-1">提交规范 <a class="header-anchor" href="#提交规范" aria-hidden="true">#</a></h2><p>截取自<a href="https://www.conventionalcommits.org/zh-hans/v1.0.0/" target="_blank" rel="noreferrer">约定式提交</a></p><ul><li>每个提交都必须使用类型字段前缀，它由一个名词构成，诸如<code>feat</code>或<code>fix</code>， 其后接可选的范围字段，可选的 !，以及必要的冒号（英文半角）和空格。</li><li>当一个提交为应用或类库实现了新功能时，必须使用<code>feat</code>类型。</li><li>当一个提交为应用修复了bug时，必须使用<code>fix</code>类型。</li><li>范围字段可以跟随在类型字段后面。范围必须是一个描述某部分代码的名词，并用圆括号包围，例如：<code>fix(parser):</code></li><li>描述字段必须直接跟在<code>&lt;类型&gt;(范围)</code>前缀的冒号和空格之后。 描述指的是对代码变更的简短总结，例如：<code>fix: array parsing issue when multiple spaces were contained in string</code>。</li><li>在简短描述之后，可以编写较长的提交正文，为代码变更提供额外的上下文信息。正文必须起始于描述字段结束的一个空行后。</li><li>提交的正文内容自由编写，并可以使用空行分隔不同段落。</li><li>在正文结束的一个空行之后，可以编写一行或多行脚注。每行脚注都必须包含一个令牌（token），后面紧跟<code>:&lt;space&gt;</code>或<code>&lt;space&gt;#</code>作为分隔符，后面再紧跟令牌的值（受<a href="https://git-scm.com/docs/git-interpret-trailers" target="_blank" rel="noreferrer">git trailer convention</a>启发）。</li><li>脚注的令牌必须使用<code>-</code>作为连字符，比如<code>Acked-by</code>(这样有助于 区分脚注和多行正文)。有一种例外情况就是 <code>BREAKING CHANGE</code>，它可以被认为是一个令牌。</li><li>脚注的值可以包含空格和换行，值的解析过程必须直到下一个脚注的令牌/分隔符出现为止。</li><li>破坏性变更必须在提交信息中标记出来，要么在<code>&lt;类型&gt;(范围)</code>前缀中标记，要么作为脚注的一项。</li><li>包含在脚注中时，破坏性变更必须包含大写的文本<code>BREAKING CHANGE</code>，后面紧跟着冒号、空格，然后是描述，例如：<code>BREAKING CHANGE: environment variables now take precedence over config files</code>。</li><li>包含在 &lt;类型&gt;(范围) 前缀时，破坏性变更必须通过把<code>!</code>直接放在<code>:</code>前面标记出来。如果使用了<code>!</code>，那么脚注中可以不写<code>BREAKING CHANGE:</code>， 同时提交信息的描述中应该用来描述破坏性变更。</li><li>在提交说明中，可以使用<code>feat</code>和<code>fix</code>之外的类型，比如<code>docs: updated ref docs.</code>。</li><li>工具的实现必须不区分大小写地解析构成约定式提交的信息单元，只有<code>BREAKING CHANGE</code>必须是大写的。</li><li><code>BREAKING-CHANGE</code>作为脚注的令牌时必须是<code>BREAKING CHANGE</code>的同义词。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>本文中的关键词 <code>必须（MUST）</code>、<code>禁止（MUST NOT）</code>、<code>必要（REQUIRED）</code>、<code>应当（SHALL）</code>、<code>不应当（SHALL NOT）</code>、<code>应该（SHOULD）</code>、<code>不应该（SHOULD NOT）</code>、<code>推荐（RECOMMENDED）</code>、<code>可以（MAY）</code> 和 <code>可选（OPTIONAL）</code> ，其相关解释参考<a href="https://www.ietf.org/rfc/rfc2119.txt" target="_blank" rel="noreferrer">RFC 2119</a>。</p></div><h2 id="提交类型" tabindex="-1">提交类型 <a class="header-anchor" href="#提交类型" aria-hidden="true">#</a></h2><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">emji</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">feat</td><td style="text-align:center;">✨</td><td style="text-align:center;">引入新功能</td></tr><tr><td style="text-align:center;">fix</td><td style="text-align:center;">🐛</td><td style="text-align:center;">修复 bug</td></tr><tr><td style="text-align:center;">style</td><td style="text-align:center;">💄</td><td style="text-align:center;">更新 UI 样式文按键</td></tr><tr><td style="text-align:center;">format</td><td style="text-align:center;">🥚</td><td style="text-align:center;">格式化代码</td></tr><tr><td style="text-align:center;">docs</td><td style="text-align:center;">📝</td><td style="text-align:center;">添加/更新文档</td></tr><tr><td style="text-align:center;">perf</td><td style="text-align:center;">👌</td><td style="text-align:center;">提高性能/优化</td></tr><tr><td style="text-align:center;">init</td><td style="text-align:center;">🎉</td><td style="text-align:center;">初次提交/初始化项目</td></tr><tr><td style="text-align:center;">test</td><td style="text-align:center;">✅</td><td style="text-align:center;">增加测试代码</td></tr><tr><td style="text-align:center;">refactor</td><td style="text-align:center;">🎨</td><td style="text-align:center;">改进代码结构/代码格式</td></tr><tr><td style="text-align:center;">patch</td><td style="text-align:center;">🚑</td><td style="text-align:center;">添加重要补丁</td></tr><tr><td style="text-align:center;">file</td><td style="text-align:center;">📦</td><td style="text-align:center;">添加新文件</td></tr><tr><td style="text-align:center;">publish</td><td style="text-align:center;">🚀</td><td style="text-align:center;">发布新版本</td></tr><tr><td style="text-align:center;">tag</td><td style="text-align:center;">📌</td><td style="text-align:center;">发布新版本</td></tr><tr><td style="text-align:center;">config</td><td style="text-align:center;">🔧</td><td style="text-align:center;">修改配置文件</td></tr><tr><td style="text-align:center;">git</td><td style="text-align:center;">🙈</td><td style="text-align:center;">添加或修改.gitignore 文件</td></tr></tbody></table>`,9),a=[c];function r(i,s,o,g,p,x){return l(),e("div",null,a)}const f=t(n,[["render",r]]);export{h as __pageData,f as default};
